shape.point = 21,
col.point = "black",
fill.point = "#FDE725FF",
size.point = 2,
alpha.point = 0.6,
maxsize = 4,
minsize = 2,
smooth = TRUE,
col.smooth = "black",
col.sign = "#440154FF",
upper = "corr",
lower = "scatter",
diag.type = "density",
col.diag = "#440154FF",
pan.spacing = 0,
lab.position = "bl")
## Análise gráfica do modelo_higienizado:
dev.off()
par(mfrow=c(2,2))
plot(modelo_higienizado)
# PRESSUPOSTO 1 - normalidade dos resíduos _
# ..Shapiro Francia
# h0: distribuição dos dados é normal (p > 0,05);
# h1: distribuição dos dados não é normal (p <= 0,05)
library(nortest)
sf.test(modelo_higienizado$residuals) #_ p-value = 0.09251 > 0,05 - distribuição é normal
summary(rstandard(modelo_higienizado)) #_ resíduos entre -2 e 2:
# PRESSUPOSTO 2 - independência dos resíduos _
# .. Durbin Watson:
# h0: não há correlação entre os resíduos;
# h1: os resíduos são autocorrelacionados;
# Se (d) for menor que 1,5 ou maior que 2,5, existe um potencial problema de autocorrelação.
# Caso contrário, se (d) estiver entre 1,5 e 2,5, a autocorrelação não será motivo de preocupação.
library(car)
durbinWatsonTest(modelo_higienizado) #_ DW Statistic = 1.502281 > p_0.05 - não há correlação
# PRESSUPOSTO 3 - variância dos erros (homocedasticidade) _
# .. Breusch Pagan:
# h0: a homocedasticidade está presente;
# h1: a heterocedasticidade está presente;
# Os resíduos devem estar distribuídos com variância igual para não violar a homocedasticidade.
library(lmtest)
library(olsrr)
bptest(modelo_higienizado) #_ p-value = 0,07159 > 0.05 - a homocedasticidade está presente
#... teste para diagnóstico de heterocedasticidade - em havendo, os valores estimados de t e a estatística F podem não ser confiáveis.
# h0: não há heterocedasticidade;
# h1: a heterocedasticidade está presente;
library(olsrr)
ols_test_breusch_pagan(modelo_higienizado) # Chi2 8.567826 > p_0.05 - não há heterocedasticidade
# PRESSUPOSTO 4 - ausência de multicolinearidade do modelo _.
# install.packages("psych", dependencies = T)
library(psych)
dev.off()
pairs.panels(dataset_higienizado) # (-) gdp_current_usd X adolescent_fertility =  -0.79 | (+) gdp_current_usd X net_official_assistence_usd
## Outras maneiras de apresentar os outputs e parâmetros do modelo_higienizado:
library(jtools)
library(huxtable)
confint(modelo_higienizado, level = 0.95) # significância de 5%
summ(modelo_higienizado, confint = T, digits = 4, ci.width = .95)
## Carregando os objetos higienizados e não-higienizados (antes do stepwise):
load(file = "dataset_higienizado.RData")
load(file = "modelo_higienizado.RData")
load(file = "d7_9.RData")
load(file = "lm_62_15.Rdata")
## Comparando os parâmetros dos modelos: modelo_higienizado X lm_62_15:
# ... Renomeando as variáveis temporariamente:
library(tidyverse)
d7_9 <- rename(d7_9, adolescent_fertility = "adolescent_fertility_rate_births_per_1_000_women_ages_15_19")
d7_9 <- rename(d7_9, gdp_current_usd = "gdp_current_us")
d7_9 <- rename(d7_9, gcf_percent_gdp = "gross_capital_formation_percent_of_gdp")
d7_9 <- rename(d7_9, net_official_assistence_usd = "net_official_development_assistance_and_official_aid_received_current_us")
d7_9 <- rename(d7_9, savings_carbon_percent_of_gni = "adjusted_savings_carbon_dioxide_damage_percent_of_gni")
d7_9 <- rename(d7_9, savings_mineral_depletion_percent_of_gni = "adjusted_savings_mineral_depletion_percent_of_gni")
d7_9 <- rename(d7_9, agricultural_raw_percent_of_merchandise_exports = "agricultural_raw_materials_exports_percent_of_merchandise_exports")
d7_9 <- rename(d7_9, agricultural_raw_percent_of_merchandise_imports = "agricultural_raw_materials_imports_percent_of_merchandise_imports")
View(d7_9)
lm_62_15_renamed <- lm(gdp_current_usd ~., data = d7_9)
export_summs(modelo_higienizado, lm_62_15_renamed,
model.names = c("modelo higienizado","modelo LM_62_15 renomeado (pré stepwise)"),
scale = F, digits = 4)
## Comparando os ICs dos betas dos dois modelos: com procedimento stepwise sem procedimento stepwise
plot_summs(modelo_higienizado, lm_62_15_renamed, scale = TRUE, plot.distributions = TRUE,
inner_ci_level = .95, colors = c("green", "grey80"))
# PRESSUPOSTO 1 - normalidade dos resíduos _
# ..Shapiro Francia
# h0: distribuição dos dados é normal (p > 0,05);
# h1: distribuição dos dados não é normal (p <= 0,05)
library(nortest)
sf.test(lm_62_15$residuals) #_ p-value = 0.8731 > 0,05 - distribuição é normal
summary(rstandard(lm_62_15)) #_ resíduos entre -2 e 2:
# PRESSUPOSTO 2 - independência dos resíduos _
# .. Durbin Watson:
# h0: não há correlação entre os resíduos;
# h1: os resíduos são autocorrelacionados;
# Se (d) for menor que 1,5 ou maior que 2,5, existe um potencial problema de autocorrelação.
# Caso contrário, se (d) estiver entre 1,5 e 2,5, a autocorrelação não será motivo de preocupação.
library(car)
durbinWatsonTest(lm_62_15) #_ DW Statistic = 1.534629 > p_0.05 - não há correlação
# PRESSUPOSTO 3 - variância dos erros (homocedasticidade) _
# .. Breusch Pagan:
# h0: a homocedasticidade está presente;
# h1: a heterocedasticidade está presente;
# Os resíduos devem estar distribuídos com variância igual para não violar a homocedasticidade.
library(lmtest)
library(olsrr)
bptest(lm_62_15) #_ p-value = 0,4061 > 0.05 - a homocedasticidade está presente
#... teste para diagnóstico de heterocedasticidade - em havendo, os valores estimados de t e a estatística F podem não ser confiáveis.
# h0: não há heterocedasticidade;
# h1: a heterocedasticidade está presente;
library(olsrr)
ols_test_breusch_pagan(lm_62_15) # Chi2 7.75866 > p_0.05 - não há heterocedasticidade
# PRESSUPOSTO 4 - ausência de multicolinearidade do modelo _.
# install.packages("psych", dependencies = T)
library(psych)
dev.off()
pairs.panels(d7_9)
## Evidenciando as métricas dos 2 (dois) modelos:
# ... Hlavac, Marek (2022). stargazer: Well-Formatted Regression and Summary Statistics Tables. R package version 5.2.3. https://CRAN.R-project.org/package=stargazer
library(stargazer)
stargazer_mh_list <- list(Shape = c("modelo_higienizado 62 x 8"),
R_Squared = c(0.8869),
R_Adjusted = c(0.8723),
F_Statistic = c(60.51),
p_Value_F = c(0.00000000000000022),
Shapiro_Francia = c(0.09251),
Durbin_Watson = c(1.502281),
Breusch_Pagan = c(0.07159),
Breusch_Pagan_Chi_Q = c(8.567826))
stargazer_mh_list
stargazer_mh_df <- as.data.frame(do.call(cbind, stargazer_mh_list))
options(scipen = 999)
View(stargazer_mh_df)
stargazer_lm_62_15_list <- list(Shape = c("modelo LM_62_15 (pré stepwise)"),
R_Squared = c(0.8908),
R_Adjusted = c(0.8582),
F_Statistic = c(27.37),
p_Value_F = c(0.00000000000000022),
Shapiro_Francia = c(0.8731),
Durbin_Watson = c(1.534629),
Breusch_Pagan = c(0.4061),
Breusch_Pagan_Chi_Q = c(7.75866))
stargazer_lm_62_15_list
stargazer_lm_62_15_df <- as.data.frame(do.call(cbind, stargazer_lm_62_15_list))
options(scipen = 999)
View(stargazer_lm_62_15_df)
stargazer(stargazer_mh_df[1,1:9], summary=F, rownames= F, type = "text")
stargazer(stargazer_lm_62_15_df[1,1:9], summary=F, rownames= F, type = "text")
## Juntando as métricas por linhas:
library(tidyverse)
stargazer_dois_modelos <- bind_rows(stargazer_mh_df, stargazer_lm_62_15_df)
class(stargazer_dois_modelos)
View(stargazer_dois_modelos)
str(stargazer_dois_modelos)
print(stargazer_dois_modelos)
## Visualizando as métricas dos 2 modelos: "62 X 8" e "62 x 7"
library(dplyr)
library(knitr)
library(kableExtra)
dev.off()
stargazer_dois_modelos %>%
select(Shape, R_Squared, R_Adjusted,
F_Statistic, p_Value_F, Shapiro_Francia, Durbin_Watson, Breusch_Pagan, Breusch_Pagan_Chi_Q) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 16)
## Salvando o stargazer_dois_modelos:
save(stargazer_dois_modelos, file = "stargazer_dois_modelos.RData")
load(file = "stargazer_dois_modelos.RData")
file.info("stargazer_dois_modelos.RData")
View(stargazer_dois_modelos)
## Comparando os parâmetros dos modelos, com posterior gravação e visualização:
library(jtools)
library(huxtable)
export_summs(modelo_higienizado, lm_62_15_renamed,scale = F, digits = 4)
preditoras_dois <- export_summs(modelo_higienizado, lm_62_15_renamed,scale = F, digits = 4)
class(preditoras_dois)
regressores_dois_modelos <- as.data.frame(preditoras_dois)
class(regressores_dois_modelos)
save(regressores_dois_modelos, file = "regressores_dois_modelos.RData")
load(file = "regressores_dois_modelos.RData")
View(regressores_dois_modelos)
renomeado_regressores_dois_modelos <- regressores_dois_modelos
View(renomeado_regressores_dois_modelos)
library(tidyverse)
renomeado_regressores_dois_modelos <- rename(renomeado_regressores_dois_modelos, variaveis_independentes = "names")
renomeado_regressores_dois_modelos <- rename(renomeado_regressores_dois_modelos, modelo_higienizado = "Model 1")
renomeado_regressores_dois_modelos <- rename(renomeado_regressores_dois_modelos, modelo_LM_62_15_renomeado_pre_stepwise = "Model 2")
View(renomeado_regressores_dois_modelos)
library(dplyr)
library(knitr)
library(kableExtra)
dev.off()
renomeado_regressores_dois_modelos %>%
select(variaveis_independentes, modelo_higienizado, modelo_LM_62_15_renomeado_pre_stepwise) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 14)
save(renomeado_regressores_dois_modelos, file = "renomeado_regressores_dois_modelos.RData")
load(file = "renomeado_regressores_dois_modelos.RData")
View(renomeado_regressores_dois_modelos)
## Gráficos de pontos do dataset_higienizado correlação positiva e negativa:
library(plotly)
options(scipen = 999)
ggplotly(
ggplot(dataset_higienizado, aes(x = gdp_current_usd, y = net_official_assistence_usd)) +
geom_point(color = "#39568CFF", size = 2.5) +
geom_smooth(aes(color = "Fitted Values"),
method = "lm", se = F, size = 1) +
xlab("gdp_current_usd") +
ylab("net_official_assistence_usd") +
scale_color_manual("(modelo higienizado) Legenda:",
values = "grey50") +
theme_classic()
)
library(plotly)
options(scipen = 999)
ggplotly(
ggplot(dataset_higienizado, aes(x = gdp_current_usd, y = adolescent_fertility)) +
geom_point(color = "#39568CFF", size = 2.5) +
geom_smooth(aes(color = "Fitted Values"),
method = "lm", se = F, size = 1) +
xlab("gdp_current_usd") +
ylab("adolescent_fertility") +
scale_color_manual("(modelo higienizado) Legenda:",
values = "grey50") +
theme_classic()
)
## Incluindo e salvando os fitted values (variável y_Hat) e residuals (variável eRRos) no modelo:
dataset_higienizado_fe <- dataset_higienizado
View(dataset_higienizado_fe) #_ shape 62 X 8
dataset_higienizado_fe$y_Hat <- modelo_higienizado$fitted.values
dataset_higienizado_fe$eRRos <- modelo_higienizado$residuals
View(dataset_higienizado_fe)
View(dataset_higienizado_fe)
## Salvando o dataset 7 variáveis + fitted values e residuals:
save(dataset_higienizado_fe, file = "dataset_higienizado_fe.RData")
load(file = "dataset_higienizado_fe.RData")
file.info("dataset_higienizado_fe.RData")
## Visualizando a base de dados com as variáveis y_Hat e eRRos (7+2 variáveis)
dataset_higienizado_fe %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 12)
## Histograma dos resíduos do modelo OLS linear:
options(scipen = 999)
library(dplyr)
library(ggplot2)
dev.off()
dataset_higienizado_fe %>%
mutate(residuos = modelo_higienizado$residuals) %>%
ggplot(aes(x = residuos)) +
geom_histogram(aes(y = ..density..),
color = "white",
fill = "grey20",
bins = 15,
alpha = 0.6) +
stat_function(fun = dnorm,
args = list(mean = mean(modelo_higienizado$residuals),
sd = sd(modelo_higienizado$residuals)),
aes(color = "curva normal teórica"),
size = 3) +
scale_color_manual("legenda:",
values = "#FDE725FF") +
labs(x = "resíduos",
y = "frequência") +
theme(panel.background = element_rect("white"),
panel.grid = element_line("orange"),
panel.border = element_rect(NA),
legend.position = "bottom")
# calculando a média de todas as variáveis:
options(scipen = 999)
mmedia_9 <- dataset_higienizado
View(mmedia_9)
for(i in 1:ncol(dataset_higienizado)) {
mmedia_9[,i] <- mean(mmedia_9[,i])
mmedia_9 <- mmedia_9[,]
}
View(mmedia_9) #_ data frame
media_9 <- mmedia_9[1,1:8]
View(media_9) #_ data frame
# calculando o  minimo de todas as variáveis:
options(scipen = 999)
mmin_9 <- dataset_higienizado
View(mmin_9)
for(i in 1:ncol(dataset_higienizado)) {
mmin_9[,i] <- min(mmin_9[,i])
mmin_9 <- mmin_9[,]
}
View(mmin_9) #_ data frame
min_9 <- mmin_9[1,1:8]
View(min_9) #_ data frame
# calculando o  máximo de todas as variáveis:
options(scipen = 999)
mmax_9 <- dataset_higienizado
View(mmax_9)
for(i in 1:ncol(dataset_higienizado)) {
mmax_9[,i] <- max(mmax_9[,i])
mmax_9 <- mmax_9[,]
}
View(mmax_9) #_ data frame
max_9 <- mmax_9[1,1:8]
View(max_9) #_ data frame
# calculando a mediana de todas as variáveis:
options(scipen = 999)
mmd_9 <- dataset_higienizado
View(mmd_9)
for(i in 1:ncol(dataset_higienizado)) {
mmd_9[,i] <- median(mmd_9[,i])
mmd_9 <- mmd_9[,]
}
View(mmd_9) #_ data frame
md_9 <- mmd_9[1,1:8]
View(md_9) #_ data frame
# calculando o desvio padrão de todas as variáveis:
options(scipen = 999)
ddp_9 <- dataset_higienizado
View(ddp_9)
for(i in 1:ncol(dataset_higienizado)) {
ddp_9[,i] <- sd(ddp_9[,i])
ddp_9 <- ddp_9[,]
}
View(ddp_9) #_ data frame
dp_9 <- ddp_9[1,1:8]
View(dp_9) #_ data frame
# calculando o IQR de todas as variáveis:
options(scipen = 999)
iiqr_9 <- dataset_higienizado
View(iiqr_9)
for(i in 1:ncol(dataset_higienizado)) {
iiqr_9[,i] <- IQR(iiqr_9[,i])
iiqr_9 <- iiqr_9[,]
}
View(iiqr_9) #_ data frame
iqr_9 <- iiqr_9[1,1:8]
View(iqr_9) #_ data frame
# calculando o primeiro quartil de todas as variáveis:
options(scipen = 999)
xiqr_9 <- as.matrix(iqr_9)
pprimeiroquartil <- dataset_higienizado
View(pprimeiroquartil)
for(i in 1:ncol(dataset_higienizado)) {
pprimeiroquartil[,i] <- quantile(pprimeiroquartil[,i], 0.25)
pprimeiroquartil <- pprimeiroquartil[,]
}
View(pprimeiroquartil) #_ data frame
primeiroquartil <- pprimeiroquartil[1,1:8]
View(primeiroquartil) #_ data frame
pquartil <- (primeiroquartil) - (1.5 * xiqr_9)
View(pquartil)
# calculando o terceiro quartil de todas as variáveis:
options(scipen = 999)
xiqr_9 <- as.matrix(iqr_9)
tterceiroquartil <- dataset_higienizado
View(tterceiroquartil)
for(i in 1:ncol(dataset_sem_valores_ausentes_62_9)) {
tterceiroquartil[,i] <- quantile(tterceiroquartil[,i], 0.75)
tterceiroquartil <- tterceiroquartil[,]
}
View(tterceiroquartil) #_ data frame
terceiroquartil <- tterceiroquartil[1,1:8]
View(terceiroquartil) #_ data frame
tquartil <- (terceiroquartil) + (1.5 * xiqr_9)
View(tquartil)
## Evidenciando medidas de tendência e de dispersão:
xmedia_9 <- as.matrix(media_9)
xmin_9 <- as.matrix(min_9)
xmax_9 <- as.matrix(max_9)
xmd_9 <- as.matrix(md_9)
xdp_9 <- as.matrix(dp_9)
xiqr_9 <- as.matrix(iqr_9)
xoutb_9 <- as.matrix(pquartil)
xouta_9 <- as.matrix(tquartil)
tendencia_dispersao <- rbind(xmedia_9, xmin_9, xmax_9, xmd_9, xdp_9, xiqr_9, xoutb_9, xouta_9)
options(scipen = 999)
View(tendencia_dispersao)
class(tendencia_dispersao)
rownames(tendencia_dispersao) <- c("media","minimo","maximo","mediana","desvio padrao","IQR", "outlier baixo", "outlier alto")
options(scipen = 999)
View(tendencia_dispersao)
tendencia_dispersao_df <- as.data.frame(tendencia_dispersao)
options(scipen = 999)
View(tendencia_dispersao_df)
dados_tendencia_dispersao_df <- tendencia_dispersao_df
View(dados_tendencia_dispersao_df) # shape 8 X 8
## Salvando as medidas de tendencia e dispersão xlsx (9 variáveis):
save(dados_tendencia_dispersao_df, file = "dados_tendencia_dispersao_df.RData")
load(file = "dados_tendencia_dispersao_df.RData")
options(scipen = 999)
View(dados_tendencia_dispersao_df)
## Visualizando tendencia e dispersao xlsx (9 variáveis):
library(dplyr)
library(knitr)
library(kableExtra)
dev.off()
options(scipen = 999)
dados_tendencia_dispersao_df %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 14)
## Visualização do comportamento dos resíduos em função dos fitted values do lm, com destaque para as distribuições das variáveis (pacote 'ggside')
library(tidyverse)
library(ggside)
dataset_higienizado %>%
ggplot(aes(x = modelo_higienizado$fitted.values, y = modelo_higienizado$residuals)) +
geom_point(color = "#FDE725FF", size = 2.5) +
geom_smooth(aes(color = "Fitted Values"),
method = "lm", formula = y ~ x, se = F, size = 2) +
geom_xsidedensity(aes(y = after_stat(density)),
alpha = 0.5,
size = 1,
position = "stack") +
geom_ysidedensity(aes(x = after_stat(density)),
alpha = 0.5,
size = 1,
position = "stack") +
xlab("Fitted Values") +
ylab("Resíduos") +
#  scale_color_tq() +
scale_fill_gradient() +
#  scale_fill_tq() +
scale_fill_gradient2() +
#  theme_tq() +
theme_minimal()
theme(ggside.panel.scale.x = 0.4,
ggside.panel.scale.y = 0.4)
#... qual é o Produto Interno Bruto registrado em 1960 ?
options(scipen = 999)
predict(object = modelo_higienizado,
data.frame(adolescent_fertility = 89.88180,
gcf_percent_gdp = 17.52323,
net_official_assistence_usd = 39580002,
savings_carbon_percent_of_gni = 0.5876489,
savings_mineral_depletion_percent_of_gni = 0.1378949,
agricultural_raw_percent_of_merchandise_exports = 14.237061,
agricultural_raw_percent_of_merchandise_imports = 2.7826802),
interval = "confidence", level = 0.95) #_  fit: -126075332779   lwr: -315303773823  upr: 63153108266
dataset_higienizado_fe$y_Hat[1] #_ -126075007953
dataset_higienizado$gdp_current_usd[1] #_ 17030465539
#... qual é o Produto Interno Bruto registrado em 1974 ?
options(scipen = 999)
predict(object = modelo_higienizado,
data.frame(adolescent_fertility = 73.82800,
gcf_percent_gdp = 24.31146,
net_official_assistence_usd = 129809998,
savings_carbon_percent_of_gni = 0.5057826,
savings_mineral_depletion_percent_of_gni = 0.2198064,
agricultural_raw_percent_of_merchandise_exports = 5.991149,
agricultural_raw_percent_of_merchandise_imports = 2.0148768),
interval = "confidence", level = 0.95) #_  fit: 303229467078    lwr: 128649527043    upr: 477809407114
dataset_higienizado_fe$y_Hat[15] #_ 303229128520
dataset_higienizado$gdp_current_usd[15] #_ 109794519728
#... qual é o Produto Interno Bruto registrado em 1989 ?
options(scipen = 999)
predict(object = modelo_higienizado,
data.frame(adolescent_fertility = 82.54740,
gcf_percent_gdp = 26.90279,
net_official_assistence_usd = 232399994,
savings_carbon_percent_of_gni = 0.6703514,
savings_mineral_depletion_percent_of_gni = 0.26229659,
agricultural_raw_percent_of_merchandise_exports = 3.514469,
agricultural_raw_percent_of_merchandise_imports = 3.4280610),
interval = "confidence", level = 0.95) #_  fit: 164709531966     lwr: -132243242687    upr: 461662306618
dataset_higienizado_fe$y_Hat[30] #_ 164709783223
dataset_higienizado$gdp_current_usd[30] #_ 347028139590
#... qual é o Produto Interno Bruto registrado em 1998 ?
options(scipen = 999)
predict(object = modelo_higienizado,
data.frame(adolescent_fertility = 83.57800,
gcf_percent_gdp = 18.16475,
net_official_assistence_usd = 260609985,
savings_carbon_percent_of_gni = 0.6046420,
savings_mineral_depletion_percent_of_gni = 0.15656106,
agricultural_raw_percent_of_merchandise_exports = 3.763963,
agricultural_raw_percent_of_merchandise_imports = 2.1034568),
interval = "confidence", level = 0.95) #_  fit: 651759095987       lwr: 480217539844       upr: 823300652131
dataset_higienizado_fe$y_Hat[39] #_ 651758940451
dataset_higienizado$gdp_current_usd[39] #_ 863711007325
#... qual é o Produto Interno Bruto registrado em 2021 ?
options(scipen = 999)
predict(object = modelo_higienizado,
data.frame(adolescent_fertility = 62.93113,
gcf_percent_gdp = 18.91975,
net_official_assistence_usd = 241033332,
savings_carbon_percent_of_gni = 0.7082946,
savings_mineral_depletion_percent_of_gni = 0.25245396,
agricultural_raw_percent_of_merchandise_exports = 4.781218,
agricultural_raw_percent_of_merchandise_imports = 1.0468559),
interval = "confidence", level = 0.95) #_  fit: 1152938157036       lwr: 983117602231       upr: 1322758711840
dataset_higienizado_fe$y_Hat[62] #_ 1152938200169
dataset_higienizado$gdp_current_usd[62] #_  1608981220812
#... qual seria o Produto Interno Bruto com os seguintes números ?
options(scipen = 999)
predict(object = modelo_higienizado,
data.frame(adolescent_fertility = 68.00,
gcf_percent_gdp = 15.00,
net_official_assistence_usd = 300000000,
savings_carbon_percent_of_gni = 0.50,
savings_mineral_depletion_percent_of_gni = 0.80,
agricultural_raw_percent_of_merchandise_exports = 3.00,
agricultural_raw_percent_of_merchandise_imports = 1.00),
interval = "confidence", level = 0.95)
#Visualizando os dois fitted values no dataset
#modelos step_empresas e step_modelo_bc
dataset_higienizado_fe %>%
select(gdp_current_usd, y_Hat, eRRos) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 18)
